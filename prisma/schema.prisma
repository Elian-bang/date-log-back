generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 날짜 엔트리 (Date Entry)
model DateEntry {
  id        String   @id @default(uuid())
  date      DateTime @unique @db.Date
  region    String   @db.VarChar(50)

  // Relations
  cafes       Cafe[]
  restaurants Restaurant[]
  spots       Spot[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([region])
  @@index([date])
  @@map("date_entries")
}

// 카페 (Cafe)
model Cafe {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(100)
  memo        String? @db.VarChar(500)
  image       String?
  link        String?
  visited     Boolean @default(false)
  latitude    Float?
  longitude   Float?

  // Relations
  dateEntryId String    @map("date_entry_id")
  dateEntry   DateEntry @relation(fields: [dateEntryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([dateEntryId])
  @@index([visited])
  @@map("cafes")
}

// 음식점 (Restaurant)
model Restaurant {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(100)
  type        String  @db.VarChar(20) // 한식, 일식, 중식, 고기집, 전체
  memo        String? @db.VarChar(500)
  image       String?
  link        String?
  visited     Boolean @default(false)
  latitude    Float?
  longitude   Float?

  // Relations
  dateEntryId String    @map("date_entry_id")
  dateEntry   DateEntry @relation(fields: [dateEntryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([dateEntryId])
  @@index([type])
  @@index([visited])
  @@map("restaurants")
}

// 관광지 (Spot)
model Spot {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(100)
  memo        String? @db.VarChar(500)
  image       String?
  link        String?
  visited     Boolean @default(false)
  latitude    Float?
  longitude   Float?

  // Relations
  dateEntryId String    @map("date_entry_id")
  dateEntry   DateEntry @relation(fields: [dateEntryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([dateEntryId])
  @@index([visited])
  @@map("spots")
}
